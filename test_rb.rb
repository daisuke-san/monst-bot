require 'nokogiri'
require 'open-uri'
require 'sanitize'

# input: HTML String
# output: HTML String の二次元配列

def copy_rowspan_content
  $html_in_row << $rowspan_count[$html_in_row.length]['content']
  $rowspan_count[$html_in_row.length - 1]['remaining_rowspan'] -= 1
  if $rowspan_count[$html_in_row.length - 1]['remaining_rowspan'] == 0
    $rowspan_count.delete($html_in_row.length - 1)
  end
end

def record(rowspan_value)
  $rowspan_count[$html_in_row.length] = { 'remaining_rowspan' => rowspan_value - 1, 'content' => $cell_node.inner_html }
end

def record_rowspan(rowspan_value, colspan)
  if rowspan_value > 1
    record(rowspan_value)
    unless colspan.nil?
      (colspan.value.to_i - 1).times do
        $html_in_row << $cell_node.inner_html
        record(rowspan_value)
      end
    end
  end
end

def row_to_array(row)
  node_index = 0
  cell_nodeset = row.css('th,td')
  $html_in_row = []
  until (cell_nodeset.nil? || (node_index >= cell_nodeset.length)) && $rowspan_count[$html_in_row.length].nil?
    if $rowspan_count[$html_in_row.length].nil?
      $cell_node = cell_nodeset[node_index]
      rowspan = $cell_node.attribute('rowspan')
      colspan = $cell_node.attribute('colspan')
      if !rowspan.nil?
        record_rowspan(rowspan.value.to_i, colspan)
      elsif !colspan.nil?
        (colspan.value.to_i - 1).times do
          $html_in_row << $cell_node.inner_html
        end
      end
      $html_in_row << $cell_node.inner_html
      node_index += 1
    else
      copy_rowspan_content
    end
  end
  $html_in_row
end

def table_to_array(table)
  begin
    doc = Nokogiri::HTML.parse(table)
  rescue StandardError => e
    puts 'parse error'
  end
  # puts doc
  $rowspan_count = {}
  html_in_table = []
  row_nodeset = doc.css('.tableSheet tr')
  row_nodeset.each do |row|
    html_in_table << row_to_array(row)
  end
  html_in_table
end


html_monst = open('https://xn--eckwa2aa3a9c8j8bve9d.gamewith.jp/')
doc = Nokogiri::HTML.parse(html_monst)
doc1 = doc.css('.monst_schedule_table')[0]
row = []
col1 = nil
col2 = nil
col3 = nil
col4 = nil

doc1.css('table tr td').each_with_index do |link, i|
  i += 1
  if i % 4 == 1
    col1 = link.content
  elsif i % 4 == 2
    col2 = link.content
  elsif i % 4 == 3
    col3 = link.content
  else
    col4 = link.content
    row << [col1, col2, col3, col4]
 end
end

row.each do |_col1, _col2, _col3, _col4|
  puts "#{_col1} : #{_col2}"
end

# next unless link.content != '攻略記事運極作成方法' && link.content != '攻略記事' && link.content != '攻略記事※マルチ' && link.content != '攻略記事※星5制限' && link.content != '-'
# puts "#{(i + 1)} : #{link.content}" if link.content.length == 11

# inomata-san
# html_konami = open('http://information.konamisportsclub.jp/newdesign/timetable.php?Facility_cd=004446')
# table = table_to_array(html_konami)
#
# bpArray = []
#
# table.each do |row|
#   dayJudge = row.length / 7
#   for i in 0..row.length - 1 do
#     next unless row[i].include?('ボディパンプ')
#     day = '7日'
#     day = '6土' if i <= dayJudge * 6
#     day = '5金' if i <= dayJudge * 5
#     day = '4木' if i <= dayJudge * 4
#     day = '3水' if i <= dayJudge * 3
#     day = '2火' if i <= dayJudge * 2
#     day = '1月' if i <= dayJudge * 1
#     bpArray << day + Sanitize.clean(row[i])
#   end
#   for i in 0..row.length - 1 do
#
#     next unless row[i].include?('ボディコンバット')
#
#     day = '7日'
#
#     day = '6土' if i <= dayJudge * 6
#
#     day = '5金' if i <= dayJudge * 5
#
#     day = '4木' if i <= dayJudge * 4
#
#     day = '3水' if i <= dayJudge * 3
#
#     day = '2火' if i <= dayJudge * 2
#
#     day = '1月' if i <= dayJudge * 1
#
#     bpArray << day + Sanitize.clean(row[i])
#
#   end
# end
#
# bpArray.uniq!.sort!
# bpArray.each do |cell|
#   cell.slice!(0)
# end
# puts bpArray.join("\n")
