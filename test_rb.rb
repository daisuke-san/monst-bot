require 'nokogiri'
require 'open-uri'
require 'sanitize'

# input: HTML String
# output: HTML String の二次元配列
#
# def copy_rowspan_content
#   $html_in_row << $rowspan_count[$html_in_row.length]['content']
#   $rowspan_count[$html_in_row.length - 1]['remaining_rowspan'] -= 1
#   if $rowspan_count[$html_in_row.length - 1]['remaining_rowspan'] == 0
#     $rowspan_count.delete($html_in_row.length - 1)
#   end
# end
#
# def record(rowspan_value)
#   $rowspan_count[$html_in_row.length] = { 'remaining_rowspan' => rowspan_value - 1, 'content' => $cell_node.inner_html }
# end
#
# def record_rowspan(rowspan_value, colspan)
#   if rowspan_value > 1
#     record(rowspan_value)
#     unless colspan.nil?
#       (colspan.value.to_i - 1).times do
#         $html_in_row << $cell_node.inner_html
#         record(rowspan_value)
#       end
#     end
#   end
# end
#
# def row_to_array(row)
#   node_index = 0
#   cell_nodeset = row.css('th,td')
#   $html_in_row = []
#   until (cell_nodeset.nil? || (node_index >= cell_nodeset.length)) && $rowspan_count[$html_in_row.length].nil?
#     if $rowspan_count[$html_in_row.length].nil?
#       $cell_node = cell_nodeset[node_index]
#       rowspan = $cell_node.attribute('rowspan')
#       colspan = $cell_node.attribute('colspan')
#       if !rowspan.nil?
#         record_rowspan(rowspan.value.to_i, colspan)
#       elsif !colspan.nil?
#         (colspan.value.to_i - 1).times do
#           $html_in_row << $cell_node.inner_html
#         end
#       end
#       $html_in_row << $cell_node.inner_html
#       node_index += 1
#     else
#       copy_rowspan_content
#     end
#   end
#   $html_in_row
# end
#
# def table_to_array(table)
#   begin
#     doc = Nokogiri::HTML.parse(table)
#   rescue StandardError => e
#     puts 'parse error'
#   end
#   # puts doc
#   $rowspan_count = {}
#   html_in_table = []
#   row_nodeset = doc.css('.tableSheet tr')
#   row_nodeset.each do |row|
#     html_in_table << row_to_array(row)
#   end
#   html_in_table
# end
#
#
# html_monst = open('https://xn--eckwa2aa3a9c8j8bve9d.gamewith.jp/')
# doc = Nokogiri::HTML.parse(html_monst)
# doc1 = doc.css('.monst_schedule_table')[0]
# row = []
# col1 = nil
# col2 = nil
# col3 = nil
# col4 = nil
#
# doc1.css('table tr td').each_with_index do |link, i|
#   i += 1
#   if i % 4 == 1
#     col1 = link.content
#   elsif i % 4 == 2
#     col2 = link.content
#   elsif i % 4 == 3
#     col3 = link.content
#   else
#     col4 = link.content
#     row << [col1, col2, col3, col4]
#  end
# end
#
# row.each do |_col1, _col2, _col3, _col4|
#   puts "#{_col1} : #{_col2}"
# end


MONST_URL = "https://xn--eckwa2aa3a9c8j8bve9d.gamewith.jp/"

# イベント情報取得メソッド
def get_event_schedule
  html_monst = open(MONST_URL)
  doc = Nokogiri::HTML.parse(html_monst)
  trigger_data = nil
  doc.css('h4').each do |data|
    if data.text == "通常降臨クエスト"
      trigger_data = data
    end
  end

  tables = trigger_data.parent

  row = []
  col1 = nil
  col2 = nil
  col3 = nil
  col4 = nil

  tables.css('table tr').each_with_index do |table|
    headers = table.css('th')
    dtls = table.css('td')

    if headers.empty?
      dtls.each_with_index do |dtl, d_index|
        d_index += 1
        if d_index % 4 == 1
          col1 = dtl.content
        elsif d_index % 4 == 2
          col2 = dtl.content
        elsif d_index % 4 == 3
          col3 = dtl.content
        else
          col4 = dtl.content
          row << [col1, col2, col3, col4]
        end
    end
    else
      headers.each_with_index do |header, h_index|
        h_index += 1
        if h_index % 4 == 1
          col1 = header.content
          row << [col1]
        end
      end
    end
  end

  str_message = ""
  row.each do |_col1, _col2, _col3, _col4|
    if _col2.nil?
      str_message = str_message << "【#{_col1}】\n"
    else
      str_message = str_message << "#{_col1} : #{_col2}\n"
    end
  end
  return str_message
end

def get_quest_guide
  html_monst = open("https://xn--eckwa2aa3a9c8j8bve9d.gamewith.jp/article/show/107577")
  doc = Nokogiri::HTML.parse(html_monst)
  tables = doc.css('.js-lazyload-img-wrap .c-progressive-img').each do |anchor|
    puts anchor[:"data-original"]
  end
  puts tables
end

def scraping(line_message)
  puts line_message
  if line_message == "イベント"
    str_event = get_event_schedule
    message = [
        {
          type: 'text',
          text: "[イベント]だな\n待ってろってばよ"
        },
        {
          type: 'text',
          text: "ほらよってばよ\n" << "#{str_event}"
        }
      ]
    return message
  elsif line_message.include?("禁忌")
    # get_quest_guide
    message = {
      "type": "template",
      "altText": "this is a image carousel template",
      "template": {
          "type": "image_carousel",
          "columns": [
              {
                "imageUrl": "https://example.com/bot/images/item1.jpg",
                "action": {
                  "type": "postback",
                  "label": "Buy",
                  "data": "action=buy&itemid=111"
                }
              },
              {
                "imageUrl": "https://example.com/bot/images/item2.jpg",
                "action": {
                  "type": "message",
                  "label": "Yes",
                  "text": "yes"
                }
              },
              {
                "imageUrl": "https://example.com/bot/images/item3.jpg",
                "action": {
                  "type": "uri",
                  "label": "View detail",
                  "uri": "http://example.com/page/222"
                }
              }
          ]
      }
    }
    return message
  else
    message = {
      type: 'text',
      text: "何いってっか分かんないってばよ\n螺旋丸くらわすぞ"
    }
    return message
  end
end



msg = scraping("イベント")
# puts msg
